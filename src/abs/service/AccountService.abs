module MAccountService;
export *;
import Account, AccountImpl from MAccountModel;
import AccountDb, AccountDbImpl from MAccountDbImpl;
import ABSHttpRequest from ABS.Framework.Http;
import Utility, UtilityImpl from ABS.Framework.Utility;

interface AccountService
{
	List<Account> list();
	Account create(Int balance, Int rekening, Int customerId);
	Account retrieve(String id);
	Account update(String id, Int balance, Int rekening, Int customerId);
	Account delete(String id);
	Account withdraw(String id, Int amount);
	Account deposit(String id, Int amount);
}

class AccountServiceImpl implements AccountService
{

    List<Account> list()
	{
		AccountDb orm = new local AccountDbImpl();

		List<Account> accounts = orm.findAll("MAccountModel.AccountImpl_c");
		
		List<Account> account_list = Nil;

		Int index = 0;
		while(index < length(accounts)) {
			Account p = nth(accounts, index);
			account_list = appendright(account_list, p);
			index = index + 1;
		}

		return account_list;
	}

	Account create(Int balance, Int rekening, Int customerId){

		AccountDb orm = new local AccountDbImpl();

		Account a = new local AccountImpl();
		a.setBalance(balance);
		a.setRekening(rekening);
		a.setCustomerId(customerId);
		orm.save(a);
		return a;
	}


	Account retrieve(String id){ 

		AccountDb orm = new local AccountDbImpl();
		String condition = "id=" + id;
		Account c = orm.findByAttributes("MAccountModel.AccountImpl_c",condition);
		return c;
	}

	Account update(String id, Int balance, Int rekening, Int customerId){

		AccountDb orm = new local AccountDbImpl();
		String condition = "id=" + id;

		Account a = orm.findByAttributes("MAccountModel.AccountImpl_c",condition);

		a.setBalance(balance);
		a.setRekening(rekening);
		a.setCustomerId(customerId);
		orm.update(a);

		return a;
	}

	Account delete(String id){ 

		AccountDb orm = new local AccountDbImpl();
		String condition = "id=" + id;
		Account a = orm.findByAttributes("MAccountModel.AccountImpl_c",condition);
		orm.delete(a);
		return a;
	}

	Account withdraw(String id, Int amount){ 

		AccountDb orm = new local AccountDbImpl();
		String condition = "id=" + id;
		Account a = orm.findByAttributes("MAccountModel.AccountImpl_c",condition);
		a.withdraw(amount);
		orm.update(a);
		return a;
	}

	Account deposit(String id, Int amount){ 

		AccountDb orm = new local AccountDbImpl();
		String condition = "id=" + id;
		Account a = orm.findByAttributes("MAccountModel.AccountImpl_c",condition);
		a.deposit(amount);
		orm.update(a);
		return a;
	}

}
