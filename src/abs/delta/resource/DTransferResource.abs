delta DTransferResource;
uses MAccountResource;

modifies interface AccountResource {
    adds Unit transfer(ABSHttpRequest request);
	adds Unit transferIntra(String sender_id, String rekening, Int amount);
	adds Unit transferInter(String sender_id, String rekening, Int amount);
}

modifies class AccountResourceImpl {
	adds Unit transferIntra(String sender_id, String rekening, Int amount) {}
	adds Unit transferInter(String sender_id, String rekening, Int amount) {}

	adds Unit transfer(ABSHttpRequest request) {
		AccountDb orm = new local AccountDbImpl();
		Utility utility = new local UtilityImpl();

        String sender_id = request.getInput("sender_id");
		String sender_condition = "id=" + sender_id;

        String rekening = request.getInput("rekening");
		String receiver_condition = "rekening=" + rekening;

        String amount_str = request.getInput("amount");
        Int amount_int = utility.stringToInteger(amount_str);

		Account sender = orm.findByAttributes("MAccountModel.AccountImpl_c", sender_condition);
		Account receiver = orm.findByAttributes("MAccountModel.AccountImpl_c", receiver_condition);

		Int sender_bank = sender.getBankId();
		Int receiver_bank = receiver.getBankId();

		if (sender_bank == receiver_bank) {
			this.transferIntra(sender_id, rekening, amount_int);
		} 
		else if (sender_bank != receiver_bank) {
			this.transferInter(sender_id, rekening, amount_int);
		}
    }

	modifies Account create(ABSHttpRequest request)
	{ 
		AccountService accountService = new local AccountServiceImpl();
		Utility utility = new local UtilityImpl();

		String b = request.getInput("balance");
		Int balance = utility.stringToInteger(b);

		String rekening_str = request.getInput("rekening");
		Int rekening = utility.stringToInteger(rekening_str);

		String cId = request.getInput("customerId");
		Int customerId = utility.stringToInteger(cId);

		String bankIdString = request.getInput("bankId");
        Int bankIdInt = utility.stringToInteger(bankIdString);

		Account acc = accountService.create(balance,rekening,customerId, bankIdInt);

		return acc;
	}

    modifies Account update(ABSHttpRequest request)
	{ 
		AccountService accountService = new local AccountServiceImpl();
		Utility utility = new local UtilityImpl();

		String id = request.getInput("id");

		String b = request.getInput("balance");
		Int balance = utility.stringToInteger(b);

		String rekening_str = request.getInput("rekening");
		Int rekening = utility.stringToInteger(rekening_str);

		String cId = request.getInput("customerId");
		Int customerId = utility.stringToInteger(cId);

        String bankIdString = request.getInput("bankId");
        Int bankIdInt = utility.stringToInteger(bankIdString);

		Account acc = accountService.update(id,balance,rekening,customerId,bankIdInt);

		return acc;
	}
}