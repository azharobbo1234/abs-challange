delta DBrandCatalogService;
uses MCatalogItemService;

modifies interface CatalogItemService{
    adds List<CatalogItem> listFilterByBrand(ABSHttpRequest request);
    adds List<CatalogItem> listFilterByBrandAndType(ABSHttpRequest request);
    adds CatalogItemFilter setupFilterBrand(ABSHttpRequest request, CatalogItemFilter filter);
    adds CatalogItemFilter setupFilterType(ABSHttpRequest request, CatalogItemFilter filter);
}

modifies class CatalogItemServiceImpl {
    
    adds CatalogItemFilter setupFilterBrand(ABSHttpRequest request, CatalogItemFilter filter){

        Bool hasBrand = request.hasKey("brand");
        Utility utility = new local UtilityImpl();
        
        if (hasBrand) {
            String brandStr = request.getInput("brand");
            Int brand = utility.stringToInteger(brandStr);
            filter.setCatalogBrandId(brand);
        }

        return filter;

    }
    adds CatalogItemFilter setupFilterType(ABSHttpRequest request, CatalogItemFilter filter){

        Bool hasType = request.hasKey("type");
        Utility utility = new local UtilityImpl();

        if (hasType) {
            String typeStr = request.getInput("type");
            Int typeId = utility.stringToInteger(typeStr);
            filter.setCatalogTypeId(typeId);
        }

        return filter;

    }

    adds List<CatalogItem> listFilterByBrand(ABSHttpRequest request){

        CatalogItemEntity entity = new local CatalogItemEntityImpl();
        CatalogItemFilter emptyFilter = new local CatalogItemFilterImpl();
        CatalogItemFilter filter = this.setupFilterBrand(request, emptyFilter);

        return entity.listFilterByBrand(filter);

    }

    adds List<CatalogItem> listFilterByBrandAndType(ABSHttpRequest request){

        CatalogItemEntity entity = new local CatalogItemEntityImpl();
        CatalogItemFilter emptyFilter = new local CatalogItemFilterImpl();
        CatalogItemFilter filterBrand =this.setupFilterBrand(request, emptyFilter);
        CatalogItemFilter filterBrandType = this.setupFilterType(request, filterBrand);

        return entity.listFilterByBrandAndType(filterBrandType);

    }
		
}